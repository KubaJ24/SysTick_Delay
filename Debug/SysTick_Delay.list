
SysTick_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800044c  08000454  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800044c  0800044c  00010454  2**0
                  CONTENTS
  4 .ARM          00000000  0800044c  0800044c  00010454  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800044c  08000454  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800044c  0800044c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000454  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000454  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010454  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bc3  00000000  00000000  000104c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001da  00000000  00000000  0001108a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00011268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004a  00000000  00000000  000112d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b738  00000000  00000000  00011322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000063c  00000000  00000000  0002ca5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b1a6  00000000  00000000  0002d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000010c  00000000  00000000  000c823c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c8348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000434 	.word	0x08000434

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000434 	.word	0x08000434

08000208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	6039      	str	r1, [r7, #0]
 8000212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000218:	2b00      	cmp	r3, #0
 800021a:	db0a      	blt.n	8000232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	b2da      	uxtb	r2, r3
 8000220:	490c      	ldr	r1, [pc, #48]	; (8000254 <__NVIC_SetPriority+0x4c>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	0112      	lsls	r2, r2, #4
 8000228:	b2d2      	uxtb	r2, r2
 800022a:	440b      	add	r3, r1
 800022c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000230:	e00a      	b.n	8000248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4908      	ldr	r1, [pc, #32]	; (8000258 <__NVIC_SetPriority+0x50>)
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	f003 030f 	and.w	r3, r3, #15
 800023e:	3b04      	subs	r3, #4
 8000240:	0112      	lsls	r2, r2, #4
 8000242:	b2d2      	uxtb	r2, r2
 8000244:	440b      	add	r3, r1
 8000246:	761a      	strb	r2, [r3, #24]
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3b01      	subs	r3, #1
 8000268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800026c:	d301      	bcc.n	8000272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800026e:	2301      	movs	r3, #1
 8000270:	e00f      	b.n	8000292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <SysTick_Config+0x40>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3b01      	subs	r3, #1
 8000278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800027a:	210f      	movs	r1, #15
 800027c:	f04f 30ff 	mov.w	r0, #4294967295
 8000280:	f7ff ffc2 	bl	8000208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <SysTick_Config+0x40>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <SysTick_Config+0x40>)
 800028c:	2207      	movs	r2, #7
 800028e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010

080002a0 <LD2_GPIO_CONF>:
#define LD2_OFF GPIOB->BSRR |= GPIO_BSRR_BR7;

void LD2_GPIO_CONF(void);
//void DELAY(uint32_t Delay_ms);

void LD2_GPIO_CONF(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	//GPIO PORT B CLOCK ENABLE
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <LD2_GPIO_CONF+0x58>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <LD2_GPIO_CONF+0x58>)
 80002aa:	f043 0302 	orr.w	r3, r3, #2
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30
	//OUTPUT
	GPIOB->MODER |= GPIO_MODER_MODER7_0;
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a11      	ldr	r2, [pc, #68]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER7_1);
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002c6:	6013      	str	r3, [r2, #0]
	//OUTPUT TYPE - PUSH PULL
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT7);
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002d2:	6053      	str	r3, [r2, #4]
	//OUTPUT SPEED VERY LOW
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR7);
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a08      	ldr	r2, [pc, #32]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002de:	6093      	str	r3, [r2, #8]
	//NO PULL UP, NO PULL DOWN
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR7);
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <LD2_GPIO_CONF+0x5c>)
 80002e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002ea:	60d3      	str	r3, [r2, #12]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40023800 	.word	0x40023800
 80002fc:	40020400 	.word	0x40020400

08000300 <SysTick_Handler>:

#include "main.h"

uint32_t Tick;

void SysTick_Handler(void){
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	//INCREASE SYSTEM TIMER
	Tick++;
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <SysTick_Handler+0x18>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	4a03      	ldr	r2, [pc, #12]	; (8000318 <SysTick_Handler+0x18>)
 800030c:	6013      	str	r3, [r2, #0]
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	2000001c 	.word	0x2000001c

0800031c <DELAY>:

void DELAY(uint32_t Delay_ms){
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
    uint32_t StartTime = Tick;
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <DELAY+0x2c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	60fb      	str	r3, [r7, #12]
    while(Tick < (StartTime + Delay_ms))
 800032a:	bf00      	nop
 800032c:	68fa      	ldr	r2, [r7, #12]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	441a      	add	r2, r3
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <DELAY+0x2c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d8f8      	bhi.n	800032c <DELAY+0x10>
    {
        // Just wait
    }
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	2000001c 	.word	0x2000001c

0800034c <main>:

int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

	LD2_OFF;
 8000350:	4b10      	ldr	r3, [pc, #64]	; (8000394 <main+0x48>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a0f      	ldr	r2, [pc, #60]	; (8000394 <main+0x48>)
 8000356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800035a:	6193      	str	r3, [r2, #24]
	LD2_GPIO_CONF();
 800035c:	f7ff ffa0 	bl	80002a0 <LD2_GPIO_CONF>

	SysTick_Config(16000000/1000);
 8000360:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000364:	f7ff ff7a 	bl	800025c <SysTick_Config>

	while(1){
		LD2_ON;
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <main+0x48>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a09      	ldr	r2, [pc, #36]	; (8000394 <main+0x48>)
 800036e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000372:	6193      	str	r3, [r2, #24]
		DELAY(500);
 8000374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000378:	f7ff ffd0 	bl	800031c <DELAY>

		LD2_OFF;
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <main+0x48>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <main+0x48>)
 8000382:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000386:	6193      	str	r3, [r2, #24]
		DELAY(500);
 8000388:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800038c:	f7ff ffc6 	bl	800031c <DELAY>
		LD2_ON;
 8000390:	e7ea      	b.n	8000368 <main+0x1c>
 8000392:	bf00      	nop
 8000394:	40020400 	.word	0x40020400

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800039c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	; (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	; (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 f811 	bl	80003ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ffbf 	bl	800034c <main>

080003ce <LoopForever>:

LoopForever:
  b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003dc:	08000454 	.word	0x08000454
  ldr r2, =_sbss
 80003e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e4:	20000020 	.word	0x20000020

080003e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC_IRQHandler>
	...

080003ec <__libc_init_array>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	4d0d      	ldr	r5, [pc, #52]	; (8000424 <__libc_init_array+0x38>)
 80003f0:	4c0d      	ldr	r4, [pc, #52]	; (8000428 <__libc_init_array+0x3c>)
 80003f2:	1b64      	subs	r4, r4, r5
 80003f4:	10a4      	asrs	r4, r4, #2
 80003f6:	2600      	movs	r6, #0
 80003f8:	42a6      	cmp	r6, r4
 80003fa:	d109      	bne.n	8000410 <__libc_init_array+0x24>
 80003fc:	4d0b      	ldr	r5, [pc, #44]	; (800042c <__libc_init_array+0x40>)
 80003fe:	4c0c      	ldr	r4, [pc, #48]	; (8000430 <__libc_init_array+0x44>)
 8000400:	f000 f818 	bl	8000434 <_init>
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	10a4      	asrs	r4, r4, #2
 8000408:	2600      	movs	r6, #0
 800040a:	42a6      	cmp	r6, r4
 800040c:	d105      	bne.n	800041a <__libc_init_array+0x2e>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f855 3b04 	ldr.w	r3, [r5], #4
 8000414:	4798      	blx	r3
 8000416:	3601      	adds	r6, #1
 8000418:	e7ee      	b.n	80003f8 <__libc_init_array+0xc>
 800041a:	f855 3b04 	ldr.w	r3, [r5], #4
 800041e:	4798      	blx	r3
 8000420:	3601      	adds	r6, #1
 8000422:	e7f2      	b.n	800040a <__libc_init_array+0x1e>
 8000424:	0800044c 	.word	0x0800044c
 8000428:	0800044c 	.word	0x0800044c
 800042c:	0800044c 	.word	0x0800044c
 8000430:	08000450 	.word	0x08000450

08000434 <_init>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr

08000440 <_fini>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr
